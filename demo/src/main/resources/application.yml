server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${CONTEXT_PATH:/}
    encoding:
      charset: utf-8
      enabled: true
  tomcat:
    accesslog:
      buffered: true
      directory: logs
      enabled: false
      file-date-format: .yyyy-MM-dd
      pattern: common
      prefix: access_log
      rename-on-rotate: false
      request-attributes-enabled: false
      rotate: true
      suffix: .log
  #    basedir: /usr/local/jar/
  session:
    tracking-modes: cookie

spring:
  mvc:
    static-path-pattern=/template/**
  http:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB
  servlet:
    multipart:
      max-file-size: 10MB      # Max file size
      max-request-size: 10MB   # Max request size
  jackson:
    serialization:
      write-dates-as-timestamps: true
  druid-ui:
    enabled: true
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    dynamic:
      primary: master #设置默认的数据源或者数据源组,默认值即为master
      druid:
        #监控统计拦截的filters
        filters: stat
        #配置初始化大小/最小/最大
        initial-size: 3
        min-idle: 3
        max-active: 20
        #获取连接等待超时时间
        max-wait: 30000
        #间隔多久进行一次检测，检测需要关闭的空闲连接
        time-between-eviction-runs-millis: 30000
        #一个连接在池中最小生存的时间
        min-evictable-idle-time-millis: 300000
        validation-query: SELECT 'x'
        test-while-idle: true
        test-on-borrow: false
        test-on-return: false
        #打开PSCache，并指定每个连接上PSCache的大小。oracle设为true，mysql设为false。分库分表较多推荐设置为false
        pool-prepared-statements: false
        max-pool-prepared-statement-per-connection-size: 20
      strict: false #严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源
      datasource:
        master:
          driver-class-name: org.postgresql.Driver
          url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5432}/${POSTGRES_DATABASE:quickdb}
          username: ${POSTGRES_USERNAME:postgres}
          password: ${POSTGRES_PASSWORD:postgres}
#        clickhouse:
#          url: jdbc:clickhouse://${CLICKHOUSE_HOST:localhost}:${CLICKHOUSE_PORT:8123}/${CLICKHOUSE_DB:quickdb}
#          username: ${CLICKHOUSE_USERNAME:admin}
#          password: ${CLICKHOUSE_PASSWORD:admin}
#          driver-class-name: ru.yandex.clickhouse.ClickHouseDriver

  redis:
    database: 0
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    password: ${REDIS_PASSWORD:}
    pool:
      max-active: 8
      max-wait: -1
      max-idle: 8
      min-idle: 0
    timeout: 1000

#  mqtt:
#    client-id: ${MQTT_CLIENT_ID:quick-demo}
#    brokers: ${MQTT_BROKERS:tcp://localhost:1883}
#    username: ${MQTT_USERNAME:emqx}
#    password: ${MQTT_PASSWORD:public}
#    clients:
#      quick-demo-1:
#        brokers: ${MQTT_BROKERS:tcp://localhost:1883}
#        username: ${MQTT_USERNAME:emqx}
#        password: ${MQTT_PASSWORD:public}
#      quick-demo-2:
#        brokers: ${MQTT_BROKERS:tcp://localhost:1883}
#        username: ${MQTT_USERNAME:emqx}
#        password: ${MQTT_PASSWORD:public}
#      quick-demo-3:
#        brokers: ${MQTT_BROKERS:tcp://localhost:1883}
#        username: ${MQTT_USERNAME:emqx}
#        password: ${MQTT_PASSWORD:public}
#      quick-demo-4:
#        brokers: ${MQTT_BROKERS:tcp://localhost:1883}
#        username: ${MQTT_USERNAME:emqx}
#        password: ${MQTT_PASSWORD:public}
  web:
    resources:
      static-locations: classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/


### MyBatis 配置
mybatis:
  mapper-locations: classpath:/mapper/*Mapper.xml

mybatis-plus:
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #开启sql日志

quick:
  restlet:
    log-trace: true
    page-key: __page
    page-size-key: __pageSize
    order-by-key: __orderBy
    includes-key: __includes
    excludes-key: __excludes
    default-page-size: 10
    pretty-json: true
  builtin:
    filemanager:
      enabled: true
      default-fs: true
      root: /tmp
    upload:
      enabled: true
    geo:
      full-access: true
      separator: ' '
  lbs:
    tencent:
      enabled: true
      key: ${TENCENT_LBS_KEY}
      secret: ${TENCENT_LBS_SECRET}
  auth:
    base-url: ${AUTH_BASE_URL:https://quickstart.dev.gdkesong.com}
    base:
      register-allowed: ${AUTH_REGISTER_ALLOWED:true}
      register-captcha-required: true
      register-verifier-required: false
      auto-register: ${AUTH_AUTO_REGISTER:false}
      salt-required: ${AUTH_SALT_REQUIRED:false}
      captcha-required: ${AUTH_CAPTCHA_REQUIRED:false}
      phone-required: ${AUTH_PHONE_REQUIRED:false}
      default-status: 1
      logo-image: classpath:img/aerospace.png
    wechat:
      enabled: true
      app-id: ${WECHAT_APP_ID:wx5edb7aea8782498b}
      app-secret: ${WECHAT_APP_SECRET:19bbdc4c184c48f778692348a1be0d1e}
      scope: ${WECHAT_SCOPE:snsapi_userinfo}
      token: ${WECHAT_TOKEN:quick-wechat}
      union: ${WECHAT_UNION:true}
    wxapp:
      enabled: true
      app-id: ${WXAPP_APP_ID:wx5edb7aea8782498b}
      app-secret: ${WXAPP_APP_SECRET:19bbdc4c184c48f778692348a1be0d1e}
      scope: ${WXAPP_SCOPE:snsapi_base}
      token: ${WXAPP_TOKEN:quick-wechat}
      union: ${WXAPP_UNION:true}

asyncconfig:
  corePoolSize: 10
  maxPoolSize: 200
  queueCapacity: 10

logging:
  file:
    name: ${LOG_FILENAME:./quick-demo.log}
  pattern:
    console: ${CONSOLE_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}
  level:
    plus.extvos: ${LOG_LEVEL:debug}
    plus.extvos.thread: ${LOG_LEVEL_THREAD:info}
#    plus.extvos.restlet: debug
#    plus.extvos.common: debug
#    plus.extvos.auth: debug
#    plus.extvos.builtin: debug
    plus.extvos.mqtt: debug
    plus.extvos.example: debug
#    logging.level.org.hibernate.SQL: DEBUG
#    logging.level.org.hibernate.type.descriptor.sql.BasicBinder: TRACE
